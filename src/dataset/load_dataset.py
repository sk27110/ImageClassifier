import os
import zipfile
import requests
from tqdm import tqdm
from pathlib import Path
import json
import logging

logger = logging.getLogger("load_data")


def download_dataset(dataset_name: str, download_dir: str, conf_dir: str = "./conf") -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç kaggle.json –∏–∑ conf_dir.

    Args:
        dataset_name (str): "username/dataset"
        download_dir (str): –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        conf_dir (str): –ø–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç kaggle.json

    Returns:
        str: –ø—É—Ç—å –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    """
    download_dir = Path(download_dir)
    download_dir.mkdir(parents=True, exist_ok=True)

    kaggle_json_path = Path(conf_dir) / "kaggle.json"
    if not kaggle_json_path.exists():
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {kaggle_json_path}")
        raise FileNotFoundError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {kaggle_json_path}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    with open(kaggle_json_path, "r") as f:
        creds = json.load(f)
    username = creds["username"]
    key = creds["key"]

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏
    dataset_slug = dataset_name.split("/")[-1]
    extracted_path = download_dir / dataset_slug
    zip_path = download_dir / f"{dataset_slug}.zip"

    # --- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ —Å–∫–∞—á–∞–Ω–æ ---
    if extracted_path.exists() and any(extracted_path.iterdir()):
        logger.info(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: {extracted_path}")
        return str(extracted_path)

    url = f"https://www.kaggle.com/api/v1/datasets/download/{dataset_name}"
    logger.info(f"üì¶ –°–∫–∞—á–∏–≤–∞–µ–º {dataset_name} –≤ {zip_path} ...")

    # --- ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
    with requests.get(url, auth=(username, key), stream=True) as r:
        if r.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {r.status_code}, {r.text[:200]}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {r.status_code}, {r.text[:200]}")

        total_size = int(r.headers.get("content-length", 0))
        block_size = 1024
        with open(zip_path, "wb") as f, tqdm(
            total=total_size, unit="B", unit_scale=True, desc="‚¨áÔ∏è Downloading"
        ) as pbar:
            for chunk in r.iter_content(chunk_size=block_size):
                f.write(chunk)
                pbar.update(len(chunk))

    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {zip_path}")

    # --- üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ---
    extracted_path.mkdir(parents=True, exist_ok=True)
    logger.info(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ {extracted_path} ...")

    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        for member in tqdm(zip_ref.infolist(), desc="üì¶ Extracting"):
            zip_ref.extract(member, extracted_path)

    logger.info(f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ –≤: {extracted_path}")

    # --- üßπ –£–¥–∞–ª—è–µ–º zip ---
    zip_path.unlink(missing_ok=True)

    return str(extracted_path)
